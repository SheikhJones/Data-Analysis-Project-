# -*- coding: utf-8 -*-
"""Foreign Direct Investment Analytics .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1csMQM_D7HYkARiKKgoypjmvjn5nBRMcn
"""

import pandas as pd                                                               #  --- By Umair Shaikh (Unified Mentor)

def load_data(file_path):
    """Load the dataset into a pandas DataFrame."""
    return pd.read_csv(file_path)

# Define file path to the dataset
file_path = "/content/FDI data.csv"

# Load data
df = load_data("/content/FDI data.csv")

def preprocess_data(df):
    """Perform data preprocessing."""
    # Set 'Sector' column as index
    df.set_index('Sector', inplace=True)
    return df

# Data preprocessing
df = preprocess_data(df)

# Display all the data
print("All Data:")
print(df)

df.head() #diisplay top 5 data

#Check for duplicated rows
duplicated_rows = df[df.duplicated()]
if not duplicated_rows.empty:
    print("\nDuplicated Rows:")
    print(duplicated_rows)
else:
    print("\nNo duplicated rows found.")

def analyze_sales_trends(df):
    """Analyze sales trends."""
    # Calculate sum of sales for each month
    month_wise_sales = df.sum(axis=0)

    # Calculate sum of sales for each year
    year_wise_sales = df.sum(axis=1)

    # Calculate sum of sales for each year-month combination
    yearly_month_wise_sales = df.copy()
    yearly_month_wise_sales['Total'] = yearly_month_wise_sales.sum(axis=1)

    return month_wise_sales, year_wise_sales, yearly_month_wise_sales

# Analyze sales trends
month_wise_sales, year_wise_sales, yearly_month_wise_sales = analyze_sales_trends(df)

# Analyze sales trends
month_wise_sales, year_wise_sales, yearly_month_wise_sales = analyze_sales_trends(df)

#Print or visualize the results

print("Month-wise Sales:")
print(month_wise_sales)

print("\nYear-wise Sales:")
print(year_wise_sales)

print("\nYearly Month-wise Sales:")
print(yearly_month_wise_sales)

import matplotlib.pyplot as plt

def plot_sales_trends(month_wise_sales, year_wise_sales, yearly_month_wise_sales):
    """Plot sales trends."""
    plt.figure(figsize=(18, 6))

# Plotting month-wise sales trend
plt.subplot(1, 3, 1)
month_wise_sales.plot(kind='bar')
plt.title('Month-wise Sales Trend')
plt.xlabel('Month')
plt.ylabel('Sales')

# Plotting year-wise sales trend
plt.subplot(1, 3, 2)
year_wise_sales.plot(kind='bar')
plt.title('Year-wise Sales Trend')
plt.xlabel('Year')
plt.ylabel('Sales')

# Plotting yearly-month-wise sales trend
plt.subplot(1, 3, 3)
yearly_month_wise_sales['Total'].plot(kind='bar')
plt.title('Yearly-Monthly Sales Trend')
plt.xlabel('Year-Month')
plt.ylabel('Sales')

plt.tight_layout()
plt.show()

# Plot sales trends
plot_sales_trends(month_wise_sales, year_wise_sales, yearly_month_wise_sales)

import ipywidgets as widgets
from IPython.display import display
import matplotlib.pyplot as plt

# Define a function to plot sales trends
def plot_sales_trends(month_wise_sales, year_wise_sales, yearly_month_wise_sales):
    """Plot sales trends."""
    plt.figure(figsize=(18, 6))

    # Plotting month-wise sales trend
    plt.subplot(1, 3, 1)
    month_wise_sales.plot(kind='bar')
    plt.title('Month-wise Sales Trend')
    plt.xlabel('Month')
    plt.ylabel('Sales')

    # Plotting year-wise sales trend
    plt.subplot(1, 3, 2)
    year_wise_sales.plot(kind='bar')
    plt.title('Year-wise Sales Trend')
    plt.xlabel('Year')
    plt.ylabel('Sales')

    # Plotting yearly-month-wise sales trend
    plt.subplot(1, 3, 3)
    yearly_month_wise_sales['Total'].plot(kind='bar')
    plt.title('Yearly-Monthly Sales Trend')
    plt.xlabel('Year-Month')
    plt.ylabel('Sales')

    plt.tight_layout()
    plt.show()

# Define interactive widgets
button = widgets.Button(description="Plot Sales Trends")
output = widgets.Output()

# Define function to handle button click event
def on_button_click(b):
    with output:
        output.clear_output()
        plot_sales_trends(month_wise_sales, year_wise_sales, yearly_month_wise_sales)

# Link button click event to function
button.on_click(on_button_click)

# Display button and output
display(button, output)

import plotly.graph_objects as go

# Define a function to plot month-wise sales trend
def plot_monthly_sales(month_wise_sales):
    fig = go.Figure(data=[go.Bar(x=month_wise_sales.index, y=month_wise_sales.values)])
    fig.update_layout(title='Month-wise Sales Trend', xaxis_title='Month', yaxis_title='Sales')
    fig.show()

# Define a function to plot year-wise sales trend
def plot_yearly_sales(year_wise_sales):
    fig = go.Figure(data=[go.Bar(x=year_wise_sales.index, y=year_wise_sales.values)])
    fig.update_layout(title='Year-wise Sales Trend', xaxis_title='Year', yaxis_title='Sales')
    fig.show()

# Define a function to plot yearly-monthly sales trend
def plot_yearly_monthly_sales(yearly_month_wise_sales):
    fig = go.Figure(data=[go.Bar(x=yearly_month_wise_sales.index, y=yearly_month_wise_sales['Total'])])
    fig.update_layout(title='Yearly-Monthly Sales Trend', xaxis_title='Year-Month', yaxis_title='Sales')
    fig.show()

# Call each plotting function separately
plot_monthly_sales(month_wise_sales)
plot_yearly_sales(year_wise_sales)
plot_yearly_monthly_sales(yearly_month_wise_sales)

import pandas as pd

# Load the provided Excel file containing FDI data
file_path = "/content/FDI data.csv"
# Load data
df = load_data("/content/FDI data.csv")

# Convert columns to numeric (excluding the 'Sector' column)
numeric_columns = df.columns.drop('Sector')
df[numeric_columns] = df[numeric_columns].apply(pd.to_numeric, errors='coerce')

# Check for missing or inconsistent data
print(df.info())

# Perform data cleaning and preprocessing if necessary

# Analyze sector-wise FDI trends over the years
sector_wise_fdi = df.drop('Sector', axis=1).sum()

# Explore year-wise FDI trends across different sectors
year_wise_fdi = df.groupby('Sector').sum()

# Calculate key metrics
total_fdi = sector_wise_fdi.sum()
average_fdi_per_year = sector_wise_fdi.mean()


# Analyze sector-wise FDI trends over the years
sector_wise_fdi = df.drop('Sector', axis=1).sum()

# Explore year-wise FDI trends across different sectors
year_wise_fdi = df.groupby('Sector').sum()

# Calculate key metrics
total_fdi = sector_wise_fdi.sum()
average_fdi_per_year = sector_wise_fdi.mean()

# Print key metrics
print("Total FDI: ", total_fdi)
print("Average FDI per year:\n", average_fdi_per_year)
# Print key metrics
print("Total FDI: ", total_fdi)
print("Average FDI per year:\n", average_fdi_per_year)

# Ensure that 'GDP Growth Rate' column exists before accessing it
if 'GDP Growth Rate' in df.columns:
    # Visualize the relationship using scatter plot
    plt.scatter(df['GDP Growth Rate'], df.drop(['Financial Year'], axis=1))
    plt.title('Relationship between FDI and GDP Growth Rate')
    plt.xlabel('GDP Growth Rate')
    plt.ylabel('FDI (in US$ million)')
    plt.legend(df.columns[1:], loc='best')
    plt.show()
else:
    print("The 'GDP Growth Rate' column does not exist in the DataFrame.")

# Analyze sector-wise FDI trends over the years
sector_wise_fdi = df.drop('Sector', axis=1).sum()

# Explore year-wise FDI trends across different sectors
year_wise_fdi = df.groupby('Sector').sum()

# Calculate key metrics
total_fdi = sector_wise_fdi.sum()
average_fdi_per_year = sector_wise_fdi.mean()

# Print key metrics
print("Total FDI: ", total_fdi)
print("Average FDI per year:\n", average_fdi_per_year)









